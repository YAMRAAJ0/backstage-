app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: devopsfarm

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  reading:
    allow:
      - host: github.com
      - host: raw.githubusercontent.com


To securely manage sensitive information in your configuration, such as tokens and secrets, itâ€™s essential to move them out of the codebase and into a secure environment. Below are steps to create an environment file and modify your configuration to use it.

1. Create an .env File
Create a new .env file in your project root to store your secrets securely. For example:

env
Copy code
# .env file
GITHUB_TOKEN=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
GITHUB_CLIENT_ID=Ov23liWggwYgluQXluaz
GITHUB_CLIENT_SECRET=9494c78ebc255d5a5213b54df5d9fbb7d882269d
2. Update app-config.yaml
Modify your app-config.yaml to reference these environment variables instead of hardcoding sensitive values:

yaml
Copy code
integrations:
  github:
    - host: github.com
      apiBaseUrl: https://api.github.com
      rawBaseUrl: https://raw.githubusercontent.com
      token: "${GITHUB_TOKEN}"  # Reference the environment variable

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  providers:
    guest: {}
    github:
      development:
        clientId: "${GITHUB_CLIENT_ID}"  # Reference the environment variable
        clientSecret: "${GITHUB_CLIENT_SECRET}"  # Reference the environment variable
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

catalog:
  locations:
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

permission:
  enabled: true


# app:
#   title: Scaffolded Backstage App
#   baseUrl: http://localhost:3000

# organization:
#   name: devopsfarm

# backend:
#   # Used for enabling authentication, secret is shared by all backend plugins
#   # See https://backstage.io/docs/auth/service-to-service-auth for
#   # information on the format
#   # auth:
#   #   keys:
#   #     - secret: ${BACKEND_SECRET}
#   baseUrl: http://localhost:7007
#   listen:
#     port: 7007
#     # Uncomment the following host directive to bind to specific interfaces
#     # host: 127.0.0.1
#   csp:
#     connect-src: ["'self'", 'http:', 'https:']
#     # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
#     # Default Helmet Content-Security-Policy values can be removed by setting the key to false
#   cors:
#     origin: http://localhost:3000
#     methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
#     credentials: true
#   # This is for local development only, it is not recommended to use this in production
#   # The production database configuration is stored in app-config.production.yaml
#     database:
#       client: better-sqlite3
#       connection: ':memory:'
#   reading:
#     allow:
#       - host: github.com
#       - host: raw.githubusercontent.com

#   # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

# integrations:
#   github:
#     - host: github.com
#       apiBaseUrl: https://api.github.com
#       rawBaseUrl: https://raw.githubusercontent.com
#       token: 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 # Replace this with a secure token


# proxy:
#   ### Example for how to add a proxy endpoint for the frontend.
#   ### A typical reason to do this is to handle HTTPS and CORS for internal services.
#   # endpoints:
#   #   '/test':
#   #     target: 'https://example.com'
#   #     changeOrigin: true

# # Reference documentation http://backstage.io/docs/features/techdocs/configuration
# # Note: After experimenting with basic setup, use CI/CD to generate docs
# # and an external cloud storage when deploying TechDocs for production use-case.
# # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
# techdocs:
#   builder: 'local' # Alternatives - 'external'
#   generator:
#     runIn: 'docker' # Alternatives - 'local'
#   publisher:
#     type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# auth:
#   # see https://backstage.io/docs/auth/ to learn about auth providers
#   providers:
#     # See https://backstage.io/docs/auth/guest/provider
#     guest: {}
#     github:
#       development:
#         clientId: Ov23liWggwYgluQXluaz
#         clientSecret: 9494c78ebc255d5a5213b54df5d9fbb7d882269d
#         signIn:
#           resolvers:
#             # Matches the GitHub username with the Backstage user entity name.
#             # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers.
#             - resolver: usernameMatchingUserEntityName

# scaffolder:
#   # see https://backstage.io/docs/features/software-templates/configuration for software template options

# # catalog:
# #   providers:
# #     githubOrg:
# #       id: production
# #       githubUrl: https://github.com
# #       orgs: ['organization-1', 'organization-2', 'organization-3']
# #       schedule:
# #         initialDelay: { seconds: 30 }
# #         frequency: { hours: 1 }
# #         timeout: { minutes: 50 }


# catalog:
#   locations:
#     - type: file
#       target: ../../examples/template/template.yaml
#       rules:
#         - allow: [Template]
#     - type: file
#       target: ../../examples/org.yaml
#       rules:
#         - allow: [User, Group]


# # # catalog:
# #   import:
# #     entityFilename: catalog-info.yaml
# #     pullRequestBranchName: backstage-integration
# #   rules:
# #     - allow: [Component, System, API, Resource, Location]
# #   locations:
# #     - type: file
# #        target: ../../examples/template/template.yaml
# #       # target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
# #       rules:
# #         - allow: [Template]
#   # locations:
#   #   # Local example data, file locations are relative to the backend process, typically `packages/backend`
#   #   - type: file
#   #     target: ../../examples/entities.yaml

#   #   # Local example template
#   #   - type: file
#   #     # target: ../../examples/template/template.yaml
#   #    # target: ../../examples/template/template.yaml
#   #       target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml

#   #     rules:
#   #       - allow: [Template]

#     # Local example organizational data
#     # - type: file
#     #   target: ../../examples/org.yaml
#     #   rules:
#     #     - allow: [User, Group]

#     ## Uncomment these lines to add more example data
#     # - type: url
#     #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

#     ## Uncomment these lines to add an example org
#     # - type: url
#     #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
#     #   rules:
#     #     - allow: [User, Group]

# kubernetes:
#   # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# # see https://backstage.io/docs/permissions/getting-started for more on the permission framework
# permission:
#   # setting this to `false` will disable permissions
#   enabled: true
